AWSTemplateFormatVersion: '2010-09-09'
Description: Template for Provisioning an ECS Cluster
Parameters:
  Environment:
    Type: String
    Default: dev
  DesiredCount:
    Type: Number
    Default: 1
  RepoaccountID:
     Type: String
     Default: 333495684591
  RepoName:
    Type: String
    Default: debtregister-events-app
  AppImageVersion:
     Type: String
     Description: Docker image version
     Default: "master-2.4.5.4-82"
  CPU:
     Type: Number
     Description: Number of CPUs to be assigned to the container
     Default: 256
  MemoryAllocation:
     Type: Number
     Description: Softlimit  for the memory
     Default: 512
  AppName:
     Type: String
     Description: ArtifactID for the microservice
     Default: "EventsSender"
  ContainerPort:
    Description: Port on which the application will startup inside the container
    Type: Number
    Default: 8080
  ECSCluster:
    Description: Cluster Name
    Type: String
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "debtreg-java-eventssender-${AWS::StackName}"
      TaskRoleArn: !Join ['/', [!Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId" ,"role"]] , !Ref RootRole] ]
      ExecutionRoleArn: !Join ['/', [!Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId" ,"role"]] , !Ref RootRole] ]
      Memory: !Ref MemoryAllocation
      Cpu: !Ref CPU
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: !Join [ ":" , [!Join ["/", [ !Join [".", [!Ref RepoaccountID, "dkr.ecr", !Ref "AWS::Region", "amazonaws.com"]  ] , !Ref RepoName ]], !Ref AppImageVersion  ]]
          Essential: true
          Memory: !Ref MemoryAllocation
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
              Protocol: TCP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: env
              Value: !Ref Environment
            - Name: app_name
              Value: !Ref AppName
            - Name: region
              Value: !Ref "AWS::Region"
              
  AssumeRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
            Resource:
              - !Join [":",["arn:aws:kms", !Ref "AWS::Region", !Ref "AWS::AccountId", "key/*"]]
          - Effect: "Allow"
            Action:
              - "kms:ListKeys"
              - "kms:ListAliases"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
      PolicyName: !Join ["", ["csp-rootrolepermissions-", !Ref AppName, !Ref Environment ,"-policy"]]
      Roles:
        - !Ref RootRole
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName: !Join ["-", [!Ref Environment, "taskrole", !Ref AppName]]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  CustomlogSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Metadata:
      Use: Pushes logs from Cloudwatch to the Centralized logging destination.
    Properties:
      DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:destination:splunkdest-eventsender-${Environment}'
      FilterPattern: ''
      LogGroupName: !Ref LogGroup
      
  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      ServiceName: !Sub "debtreg-${Environment}-eventsender-java-application"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                Fn::Sub: "eventssender-${Environment}"
          Subnets:
            - !ImportValue CoreVPC:PrivateSubnetAz1
            - !ImportValue CoreVPC:PrivateSubnetAz2